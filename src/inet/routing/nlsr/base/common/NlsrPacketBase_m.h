//
// Generated file, do not edit! Created by nedtool 5.6 from inet/routing/nlsr/base/common/NlsrPacketBase.msg.
//

#ifndef __INET__NLSR_NLSRPACKETBASE_M_H
#define __INET__NLSR_NLSRPACKETBASE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace nlsr {

class NlsrPacketBase;
} // namespace nlsr
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ndn/ndnFields_m.h" // import inet.networklayer.contract.ndn.ndnFields


namespace inet {
namespace nlsr {

// cplusplus {{
    #include "inet/networklayer/contract/ndn/iName.h"
// }}

/**
 * Enum generated from <tt>inet/routing/nlsr/base/common/NlsrPacketBase.msg:27</tt> by nedtool.
 * <pre>
 * enum NlsrPacketType
 * {
 *     HELLO_INTEREST = 7;
 *     HELLO_DATA = 8;
 *     SYNC_INTEREST = 9;
 *     SYNC_DATA = 10;
 *     ADJ_LSA_INTEREST = 11;
 *     ADJ_LSA_DATA = 12;
 *     NAME_LSA_INTEREST = 13;
 *     NAME_LSA_DATA = 14;
 * }
 * </pre>
 */
enum NlsrPacketType {
    HELLO_INTEREST = 7,
    HELLO_DATA = 8,
    SYNC_INTEREST = 9,
    SYNC_DATA = 10,
    ADJ_LSA_INTEREST = 11,
    ADJ_LSA_DATA = 12,
    NAME_LSA_INTEREST = 13,
    NAME_LSA_DATA = 14
};

/**
 * Class generated from <tt>inet/routing/nlsr/base/common/NlsrPacketBase.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Represents an NLSR packet header
 * //
 * class NlsrPacketBase extends FieldsChunk
 * {
 *     chunkLength = B(48);
 * 
 *     iName interestName;   // interst name
 *     short version = -1;     // 1 byte
 *     NlsrPacketType type = static_cast<NlsrPacketType>(-1);    // 1 byte
 *     int packetLengthField;  // 2 bytes
 * }
 * </pre>
 */
class INET_API NlsrPacketBase : public ::inet::FieldsChunk
{
  protected:
    iName interestName;
    short version = -1;
    inet::nlsr::NlsrPacketType type = static_cast<NlsrPacketType>(-1);
    int packetLengthField = 0;

  private:
    void copy(const NlsrPacketBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NlsrPacketBase&);

  public:
    NlsrPacketBase();
    NlsrPacketBase(const NlsrPacketBase& other);
    virtual ~NlsrPacketBase();
    NlsrPacketBase& operator=(const NlsrPacketBase& other);
    virtual NlsrPacketBase *dup() const override {return new NlsrPacketBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const iName& getInterestName() const;
    virtual iName& getInterestNameForUpdate() { handleChange();return const_cast<iName&>(const_cast<NlsrPacketBase*>(this)->getInterestName());}
    virtual void setInterestName(const iName& interestName);
    virtual short getVersion() const;
    virtual void setVersion(short version);
    virtual inet::nlsr::NlsrPacketType getType() const;
    virtual void setType(inet::nlsr::NlsrPacketType type);
    virtual int getPacketLengthField() const;
    virtual void setPacketLengthField(int packetLengthField);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NlsrPacketBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NlsrPacketBase& obj) {obj.parsimUnpack(b);}

} // namespace nlsr
} // namespace inet

#endif // ifndef __INET__NLSR_NLSRPACKETBASE_M_H

