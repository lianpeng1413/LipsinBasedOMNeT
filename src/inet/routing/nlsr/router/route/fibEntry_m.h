//
// Generated file, do not edit! Created by nedtool 5.6 from inet/routing/nlsr/router/route/fibEntry.msg.
//

#ifndef __INET__NLSR_FIBENTRY_M_H
#define __INET__NLSR_FIBENTRY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace nlsr {

class FibEntry;
} // namespace nlsr
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/networklayer/contract/ndn/ndnFields_m.h" // import inet.networklayer.contract.ndn.ndnFields

// cplusplus {{
    #include "inet/routing/nlsr/router/route/nextHopList.h"
// }}


namespace inet {
namespace nlsr {

/**
 * Class generated from <tt>inet/routing/nlsr/router/route/fibEntry.msg:31</tt> by nedtool.
 * <pre>
 * class FibEntry extends cObject
 * {
 *     inet::iName forwardName;
 *     NexthopList m_nexthopList;
 *     unsigned long m_seqNo = 1;
 * }
 * </pre>
 */
class INET_API FibEntry : public ::omnetpp::cObject
{
  protected:
    inet::iName forwardName;
    NexthopList m_nexthopList;
    unsigned long m_seqNo = 1;

  private:
    void copy(const FibEntry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FibEntry&);

  public:
    FibEntry();
    FibEntry(const FibEntry& other);
    virtual ~FibEntry();
    FibEntry& operator=(const FibEntry& other);
    virtual FibEntry *dup() const override {return new FibEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::iName& getForwardName() const;
    virtual inet::iName& getForwardNameForUpdate() { return const_cast<inet::iName&>(const_cast<FibEntry*>(this)->getForwardName());}
    virtual void setForwardName(const inet::iName& forwardName);
    virtual const NexthopList& getM_nexthopList() const;
    virtual NexthopList& getM_nexthopListForUpdate() { return const_cast<NexthopList&>(const_cast<FibEntry*>(this)->getM_nexthopList());}
    virtual void setM_nexthopList(const NexthopList& m_nexthopList);
    virtual unsigned long getM_seqNo() const;
    virtual void setM_seqNo(unsigned long m_seqNo);

  public:
    FibEntry(iName name): cObject(), forwardName(name){}    
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FibEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FibEntry& obj) {obj.parsimUnpack(b);}

} // namespace nlsr
} // namespace inet

#endif // ifndef __INET__NLSR_FIBENTRY_M_H

