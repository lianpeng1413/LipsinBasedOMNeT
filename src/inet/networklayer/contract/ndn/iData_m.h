//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/contract/ndn/iData.msg.
//

#ifndef __INET_IDATA_M_H
#define __INET_IDATA_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class iData;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/ProtocolTag_m.h" // import inet.common.ProtocolTag

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

#include "inet/networklayer/contract/ndn/ndnFields_m.h" // import inet.networklayer.contract.ndn.ndnFields


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/contract/ndn/iData.msg:25</tt> by nedtool.
 * <pre>
 * class iData extends FieldsChunk
 * {
 *     chunkLength = B(128);
 * 
 *     iName interestName;
 * 
 *     unsigned char type = 0;
 *     int hotCount = 0;
 *     int timeToLive = 8;
 *     uint16_t checksum = 0;
 *     bool moreFragments = false;
 * 
 *     Port_t portNumber1 = 0;
 *     Port_t portNumber2 = 0;
 *     MacAddress MAC;
 *     uint32_t offset = 0;
 *     B HeaderLength = B(78);
 *     iName lastHop;
 *     uint16_t MTU = 0;
 *     bool comeFromSource;
 *     simtime_t routeLifetime;
 *     int routeMetric;
 *     B totalLength;
 * }
 * </pre>
 */
class INET_API iData : public ::inet::FieldsChunk
{
  protected:
    iName interestName;
    unsigned char type = 0;
    int hotCount = 0;
    int timeToLive = 8;
    uint16_t checksum = 0;
    bool moreFragments = false;
    Port_t portNumber1 = 0;
    Port_t portNumber2 = 0;
    MacAddress MAC;
    uint32_t offset = 0;
    B HeaderLength = B(78);
    iName lastHop;
    uint16_t MTU = 0;
    bool comeFromSource = false;
    omnetpp::simtime_t routeLifetime = SIMTIME_ZERO;
    int routeMetric = 0;
    B totalLength = B(-1);

  private:
    void copy(const iData& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const iData&);

  public:
    iData();
    iData(const iData& other);
    virtual ~iData();
    iData& operator=(const iData& other);
    virtual iData *dup() const override {return new iData(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const iName& getInterestName() const;
    virtual iName& getInterestNameForUpdate() { handleChange();return const_cast<iName&>(const_cast<iData*>(this)->getInterestName());}
    virtual void setInterestName(const iName& interestName);
    virtual unsigned char getType() const;
    virtual void setType(unsigned char type);
    virtual int getHotCount() const;
    virtual void setHotCount(int hotCount);
    virtual int getTimeToLive() const;
    virtual void setTimeToLive(int timeToLive);
    virtual uint16_t getChecksum() const;
    virtual void setChecksum(uint16_t checksum);
    virtual bool getMoreFragments() const;
    virtual void setMoreFragments(bool moreFragments);
    virtual const Port_t& getPortNumber1() const;
    virtual Port_t& getPortNumber1ForUpdate() { handleChange();return const_cast<Port_t&>(const_cast<iData*>(this)->getPortNumber1());}
    virtual void setPortNumber1(const Port_t& portNumber1);
    virtual const Port_t& getPortNumber2() const;
    virtual Port_t& getPortNumber2ForUpdate() { handleChange();return const_cast<Port_t&>(const_cast<iData*>(this)->getPortNumber2());}
    virtual void setPortNumber2(const Port_t& portNumber2);
    virtual const MacAddress& getMAC() const;
    virtual MacAddress& getMACForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<iData*>(this)->getMAC());}
    virtual void setMAC(const MacAddress& MAC);
    virtual uint32_t getOffset() const;
    virtual void setOffset(uint32_t offset);
    virtual B getHeaderLength() const;
    virtual void setHeaderLength(B HeaderLength);
    virtual const iName& getLastHop() const;
    virtual iName& getLastHopForUpdate() { handleChange();return const_cast<iName&>(const_cast<iData*>(this)->getLastHop());}
    virtual void setLastHop(const iName& lastHop);
    virtual uint16_t getMTU() const;
    virtual void setMTU(uint16_t MTU);
    virtual bool getComeFromSource() const;
    virtual void setComeFromSource(bool comeFromSource);
    virtual omnetpp::simtime_t getRouteLifetime() const;
    virtual void setRouteLifetime(omnetpp::simtime_t routeLifetime);
    virtual int getRouteMetric() const;
    virtual void setRouteMetric(int routeMetric);
    virtual B getTotalLength() const;
    virtual void setTotalLength(B totalLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const iData& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, iData& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IDATA_M_H

