//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/ndn/PIT/pitEntry.msg.
//

#ifndef __INET_PITENTRY_M_H
#define __INET_PITENTRY_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class pitEntry;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

#include "inet/networklayer/contract/ndn/ndnFields_m.h" // import inet.networklayer.contract.ndn.ndnFields


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/ndn/PIT/pitEntry.msg:24</tt> by nedtool.
 * <pre>
 * class pitEntry extends cObject
 * {
 *     inet::iName nidName;
 *     simtime_t TTL;
 *     MacAddress mac;
 *     int interfaceId;
 *     long Nonce;
 *     bool served;
 *     bool isConsumer;
 * }
 * </pre>
 */
class INET_API pitEntry : public ::omnetpp::cObject
{
  protected:
    inet::iName nidName;
    omnetpp::simtime_t TTL = SIMTIME_ZERO;
    MacAddress mac;
    int interfaceId = 0;
    long Nonce = 0;
    bool served = false;
    bool isConsumer_ = false;

  private:
    void copy(const pitEntry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const pitEntry&);

  public:
    pitEntry();
    pitEntry(const pitEntry& other);
    virtual ~pitEntry();
    pitEntry& operator=(const pitEntry& other);
    virtual pitEntry *dup() const override {return new pitEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::iName& getNidName() const;
    virtual inet::iName& getNidNameForUpdate() { return const_cast<inet::iName&>(const_cast<pitEntry*>(this)->getNidName());}
    virtual void setNidName(const inet::iName& nidName);
    virtual omnetpp::simtime_t getTTL() const;
    virtual void setTTL(omnetpp::simtime_t TTL);
    virtual const MacAddress& getMac() const;
    virtual MacAddress& getMacForUpdate() { return const_cast<MacAddress&>(const_cast<pitEntry*>(this)->getMac());}
    virtual void setMac(const MacAddress& mac);
    virtual int getInterfaceId() const;
    virtual void setInterfaceId(int interfaceId);
    virtual long getNonce() const;
    virtual void setNonce(long Nonce);
    virtual bool getServed() const;
    virtual void setServed(bool served);
    virtual bool isConsumer() const;
    virtual void setIsConsumer(bool isConsumer);

  public:
    pitEntry(const iName& name, simtime_t t, MacAddress mac, int interfaceId, long Nonce = 0, bool served = false, bool isconsumer=false): cObject(), nidName(name), TTL(t), mac(mac), interfaceId(interfaceId), Nonce(Nonce), served(served), isConsumer_(isconsumer){}    
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const pitEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, pitEntry& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_PITENTRY_M_H

