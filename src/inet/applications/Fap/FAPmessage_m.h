//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/Fap/FAPmessage.msg.
//

#ifndef __INET_FAPMESSAGE_M_H
#define __INET_FAPMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class FAPhead;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Enum generated from <tt>inet/applications/Fap/FAPmessage.msg:9</tt> by nedtool.
 * <pre>
 * enum FAPmsgType
 * {
 *     HELLO = 1;
 *     AREQ = 2;
 *     AF = 3;
 *     PARTITION = 4;
 * }
 * </pre>
 */
enum FAPmsgType {
    HELLO = 1,
    AREQ = 2,
    AF = 3,
    PARTITION = 4
};

/**
 * Class generated from <tt>inet/applications/Fap/FAPmessage.msg:18</tt> by nedtool.
 * <pre>
 * class FAPhead extends FieldsChunk
 * {
 *     FAPmsgType FapType;
 *     bool R;
 *     bool I;
 *     bool M;
 *     int counter;
 *     int seq;
 *     Ipv4Address Source;
 *     Ipv4Address Dest;
 *     unsigned int IDnumber;
 *     string filterValue;
 *     unsigned int filterM;
 *     unsigned int filterK;
 * 
 *     unsigned long Signature1;
 *     unsigned long Signature2;
 * }
 * </pre>
 */
class INET_API FAPhead : public ::inet::FieldsChunk
{
  protected:
    inet::FAPmsgType FapType = static_cast<inet::FAPmsgType>(-1);
    bool R = false;
    bool I = false;
    bool M = false;
    int counter = 0;
    int seq = 0;
    Ipv4Address Source;
    Ipv4Address Dest;
    unsigned int IDnumber = 0;
    omnetpp::opp_string filterValue;
    unsigned int filterM = 0;
    unsigned int filterK = 0;
    unsigned long Signature1 = 0;
    unsigned long Signature2 = 0;

  private:
    void copy(const FAPhead& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FAPhead&);

  public:
    FAPhead();
    FAPhead(const FAPhead& other);
    virtual ~FAPhead();
    FAPhead& operator=(const FAPhead& other);
    virtual FAPhead *dup() const override {return new FAPhead(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::FAPmsgType getFapType() const;
    virtual void setFapType(inet::FAPmsgType FapType);
    virtual bool getR() const;
    virtual void setR(bool R);
    virtual bool getI() const;
    virtual void setI(bool I);
    virtual bool getM() const;
    virtual void setM(bool M);
    virtual int getCounter() const;
    virtual void setCounter(int counter);
    virtual int getSeq() const;
    virtual void setSeq(int seq);
    virtual const Ipv4Address& getSource() const;
    virtual Ipv4Address& getSourceForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<FAPhead*>(this)->getSource());}
    virtual void setSource(const Ipv4Address& Source);
    virtual const Ipv4Address& getDest() const;
    virtual Ipv4Address& getDestForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<FAPhead*>(this)->getDest());}
    virtual void setDest(const Ipv4Address& Dest);
    virtual unsigned int getIDnumber() const;
    virtual void setIDnumber(unsigned int IDnumber);
    virtual const char * getFilterValue() const;
    virtual void setFilterValue(const char * filterValue);
    virtual unsigned int getFilterM() const;
    virtual void setFilterM(unsigned int filterM);
    virtual unsigned int getFilterK() const;
    virtual void setFilterK(unsigned int filterK);
    virtual unsigned long getSignature1() const;
    virtual void setSignature1(unsigned long Signature1);
    virtual unsigned long getSignature2() const;
    virtual void setSignature2(unsigned long Signature2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FAPhead& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FAPhead& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_FAPMESSAGE_M_H

