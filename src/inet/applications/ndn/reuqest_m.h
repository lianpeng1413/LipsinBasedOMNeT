//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/ndn/reuqest.msg.
//

#ifndef __INET_REUQEST_M_H
#define __INET_REUQEST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ndnReqest;
class ndnReply;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/ProtocolTag_m.h" // import inet.common.ProtocolTag

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ndn/ndnFields_m.h" // import inet.networklayer.contract.ndn.ndnFields


namespace inet {

/**
 * Class generated from <tt>inet/applications/ndn/reuqest.msg:25</tt> by nedtool.
 * <pre>
 * class ndnReqest extends FieldsChunk
 * {
 *     inet::iName interestName;
 *     chunkLength = B(20);
 * 
 * }
 * </pre>
 */
class INET_API ndnReqest : public ::inet::FieldsChunk
{
  protected:
    inet::iName interestName;

  private:
    void copy(const ndnReqest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ndnReqest&);

  public:
    ndnReqest();
    ndnReqest(const ndnReqest& other);
    virtual ~ndnReqest();
    ndnReqest& operator=(const ndnReqest& other);
    virtual ndnReqest *dup() const override {return new ndnReqest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::iName& getInterestName() const;
    virtual inet::iName& getInterestNameForUpdate() { handleChange();return const_cast<inet::iName&>(const_cast<ndnReqest*>(this)->getInterestName());}
    virtual void setInterestName(const inet::iName& interestName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ndnReqest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ndnReqest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/ndn/reuqest.msg:32</tt> by nedtool.
 * <pre>
 * class ndnReply extends FieldsChunk
 * {
 *     inet::iName interestName;
 *     chunkLength = B(4);
 *     double CreateTime;
 * }
 * </pre>
 */
class INET_API ndnReply : public ::inet::FieldsChunk
{
  protected:
    inet::iName interestName;
    double CreateTime = 0;

  private:
    void copy(const ndnReply& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ndnReply&);

  public:
    ndnReply();
    ndnReply(const ndnReply& other);
    virtual ~ndnReply();
    ndnReply& operator=(const ndnReply& other);
    virtual ndnReply *dup() const override {return new ndnReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const inet::iName& getInterestName() const;
    virtual inet::iName& getInterestNameForUpdate() { handleChange();return const_cast<inet::iName&>(const_cast<ndnReply*>(this)->getInterestName());}
    virtual void setInterestName(const inet::iName& interestName);
    virtual double getCreateTime() const;
    virtual void setCreateTime(double CreateTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ndnReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ndnReply& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_REUQEST_M_H

